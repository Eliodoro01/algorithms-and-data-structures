// Funzione principale
LCS_Memo(X, Y)
    m = lunghezza di X
    n = lunghezza di Y

    Crea matrice M[0..m, 0..n] e inizializza tutti gli elementi a -1
    Crea matrice P[0..m, 0..n] per la direzione ('\', '|', '-')

    LCS_length_memo(X, m, Y, n, M, P)      // Popola le tabelle M e P

    L = Ricostruisci_LCS(X, P, m, n)       // Ricostruisce la LCS
    return (M[m,n], L)


// Funzione ricorsiva con memoization
LCS_length_memo(X, i, Y, j, M, P)
    if i == 0 or j == 0
        return 0

    if M[i,j] ≠ -1
        return M[i,j]

    if X[i] == Y[j]
        M[i,j] = LCS_length_memo(X, i-1, Y, j-1, M, P) + 1
        P[i,j] = "\"                         // Diagonale: caratteri corrispondenti
    else
        up = LCS_length_memo(X, i-1, Y, j, M, P)
        left = LCS_length_memo(X, i, Y, j-1, M, P)

        if up > left
            M[i,j] = up
            P[i,j] = "|"                     // Verso l’alto
        else
            M[i,j] = left
            P[i,j] = "-"                     // Verso sinistra

    return M[i,j]


// Funzione per ricostruire la LCS usando la tabella P
Ricostruisci_LCS(X, P, i, j)
    LCS = stringa vuota
    while i > 0 and j > 0
        if P[i,j] == "\"
            LCS = X[i] + LCS
            i = i - 1
            j = j - 1
        else if P[i,j] == "|"
            i = i - 1
        else
            j = j - 1
    return LCS


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

lcs_memo(X, Y){

    m = lenght(X)
    n = lenght(Y)

    M = new matrice(m,n)
    P = new matrice(m,n)

    lcs_lenght_memo(X, m, Y, n, M, P)

    L = ricostruisci_lcs(X,P, m,n)

    return(M[m,n], L)
}

lcs_lenght_memo(X, i, Y, j, M, P ){

    if i == 0 || j == 0{
        return 0
    }

    if M[i,j] != -1{
        return M[i,j]
    }

    if X[i] == Y[j]{
        M[i,j] = lcs_lenght_memo(X, i-1, Y, j-1, M, P) + 1
        P[i,j] = "\"
    }

    else{
        up = lcs_lenght_memo(X, i - 1, Y, j, M, P)
        left = lcs_lenght_memo(X, i, Y, j - 1, M, P)

        if up > left{
            M[i,j] = up
            P[i,j] = "|"
        }
        else{
            M[i,j] = left
            P[i,j] = "-"
        }
    }

    return M[i,j]    

}


ricostruisci_lcs(X, P, i,j){

    LCS = stringa

    while i > 0 and j > 0{

        if P[i,j] == "\"{
            LCS = X[i] + LCS
            i = i-1
            j = j-1
        }
        else if P[i,j] == "|"{
            i = i - 1
        }
        else{
            j = j -1 
        }
    }

    return LCS
}