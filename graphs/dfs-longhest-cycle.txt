/*Grafo con funzione perso W:E->R con un algoritmo ricorsivo che conta il numero di nodi nel pi√π lungo ciclo di G*/

max_cycle_length = 0

find_longest_cycle(graph):
    for each node in graph.nodes:
        node.color = white
        node.predecessor = NULL
    
    for node in graph.nodes:
        if node.color == white:
            current_path = []  # Stack per tenere traccia del percorso corrente
            dfs_visit(node, current_path)

    return max_cycle_length

dfs_visit(node, current_path):
    node.color = gray
    current_path.push(node)  # Aggiungi il nodo al percorso corrente

    for adj_node in node.adj:
        if adj_node.color == white:
            adj_node.predecessor = node
            dfs_visit(adj_node, current_path)
        else if adj_node.color == gray and adj_node != node.predecessor:
            # Trovato un ciclo (back edge)
            cycle_length = current_path.length() - current_path.find_index(adj_node) + 1
            max_cycle_length = max(max_cycle_length, cycle_length)

    current_path.pop()  # Rimuovi il nodo dal percorso corrente (backtracking)
    node.color = black