/**
 * scc = strongly connected components
 * t_graph = transposed graph (graph with reversed edges)
 */

dfs (graph) {
  stack = new stack();

  for (node in graph.nodes) {
    pi[node] = null;
    d[node] = 0;
    color[node] = white;
  }

  for (node in graph.nodes) {
    if (color[node] == white) {
      dfs_visit_1(node, stack);
    }
  }

  t_graph = create_t_graph();

  while (!stack.is_empty()) {
    node = stack.pop();

    if (color[node] == white) {
      dfs_visit_2(node, t_graph);
    }
  }

  scc = predecessor - subgraph;
}

dfs_visit_1(node, stack) {
  color[node] = gray;
  d[node] = time + 1;

  for (adj_node in adj[node]) {
    if (color[adj_node] == white) {
      pi[adj_node] = node;
      dfs_visit_1(node, stack);
    }
  }

  color[node] = black;
  f[node] = time + 1;

  stack.push(node);
}

dfs_visit_2(node, t_graph) {
  color[node] = gray;
  d[node] = time + 1;

  for (t_adj_node in t_adj[node]) {
    if (color[t_adj_node] == white) {
      pi[t_adj_node] = node;
      dfs_visit_2(t_adj_node, t_graph);
    }
  }

  f[node] = time + 1;
  color[node] = black;
}