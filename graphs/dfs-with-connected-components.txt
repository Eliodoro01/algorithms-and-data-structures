/**
 * scc = strongly connected components
 * t_graph = transposed graph (graph with reversed edges)
 */

main_alg(G){ // Funzione principale per trovare le componenti fortemente connesse (SCC)

    stack = new stack()            // Stack per memorizzare i nodi in ordine di fine visita
    time = 0                       // Contatore globale per i tempi di visita nel DFS

    for node in G.nodes{          // Inizializza i nodi del grafo
        node.color = white        // Colore bianco = non visitato
        node.predecessor = null   // Nessun predecessore inizialmente
        node.d = 0                // Tempo di scoperta iniziale
        node.f = 0                // Tempo di fine iniziale
    }

    for node in G.nodes{          // Primo passaggio DFS (sul grafo originale)
        if node.color == white{   // Se il nodo non è ancora stato visitato
            DFS_firstPass(node, stack) // Avvia DFS e salva nel stack l’ordine di fine
        }
    }

    t_graph = create_t_graph(G)   // Crea il grafo trasposto (con archi invertiti)

    for node in t_graph.nodes{    // Reinizializza tutti i nodi nel grafo trasposto
        node.color = white        // Colore bianco = non visitato
    }

    ssc_list = []                 // Lista delle componenti fortemente connesse (output finale)

    while !stack.is_empty(){      // Cicla finché ci sono nodi nello stack
        node = stack.pop()        // Prende il nodo con tempo di fine massimo

        if node.color == white{   // Se non è ancora stato visitato nel secondo passaggio
            ssc = []              // Nuova componente fortemente connessa
            DFS_secondPass(node, t_graph, ssc) // DFS sul grafo trasposto
            scc_list.add(scc)     // Aggiunge la SCC alla lista finale
        }
    }

    return scc_list               // Restituisce tutte le SCC trovate
}


DFS_firstPass(node, stack){       // DFS per il primo passaggio (sul grafo originale)

    time = time + 1               // Incrementa il tempo globale
    node.d = time                 // Salva il tempo di scoperta
    node.color = gray             // Nodo in esplorazione (grigio)

    for adj_node in node.adj{     // Per ogni nodo adiacente
        if adj_node.color == white{ // Se non è stato ancora visitato
            DFS_firstPass(adj_node, stack) // DFS ricorsiva
        }
    }

    node.color = black            // Fine esplorazione del nodo
    time = time + 1               // Incrementa il tempo globale
    node.f = time                 // Salva il tempo di fine visita

    stack.push(node)              // Inserisce il nodo nello stack in base al tempo di fine
}



DFS_secondPass(node, t_graph, scc){ // DFS sul grafo trasposto

    node.color = gray             // Nodo in esplorazione
    scc.add(node)                 // Aggiunge il nodo alla SCC corrente

    for adj_node in t_graph.getAdiacent(node){ // Per ogni nodo adiacente nel grafo trasposto
        if adj_node.color == white{ // Se non ancora visitato
            DFS_secondPass(adj_node, t_graph, scc) // DFS ricorsiva
        }
    }

    node.color = black            // Fine esplorazione del nodo
}



create_t_graph(G){               // Funzione per creare il grafo trasposto

    t_graph = new graph()         // Crea nuovo grafo vuoto

    for node in G.nodes{          // Per ogni nodo nel grafo originale
        for adj_node in node.adj{ // Per ogni adiacente del nodo
            t_graph.add(adj_node)           // Aggiunge l'adiacente al grafo trasposto (se non già presente)
            t_graph.add(node)               // Aggiunge anche il nodo corrente (se non già presente)
            t_graph.add_edge(adj_node, node) // Aggiunge arco inverso: da adj_node a node
        }
    }

    return t_graph                // Restituisce il grafo trasposto
}
