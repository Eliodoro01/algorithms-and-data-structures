/**
 * scc = strongly connected components
 * t_graph = transposed graph (graph with reversed edges)
 */

dfs (graph) {
  stack = new stack();

  for (node in graph.nodes) {
    node.parent = null;
    node.d = 0;
    node.color = white;
  }

  for (node in graph.nodes) {
    if (node.color == white) {
      dfs_visit_1(node, stack);
    }
  }

  t_graph = create_t_graph();

  while (!stack.is_empty()) {
    node = stack.pop();

    if (node.color == white) {
      dfs_visit_2(node, t_graph);
    }
  }

  scc = predecessor - subgraph;
}

dfs_visit_1(node, stack) {
  node.color = gray;
  node.d = time + 1;

  for (adj_node in node.adj) {
    if (adj_node.color == white) {
      adj_node.parent = node;
      dfs_visit_1(node, stack);
    }
  }

  node.color = black;
  node.f = time + 1;

  stack.push(node);
}

dfs_visit_2(node, t_graph) {
  node.color = gray;
  node.d = time + 1;

  for (t_adj_node in node.t_adj_node) {
    if (color[t_adj_node] == white) {
      parent.t_adj_node = node;
      dfs_visit_2(t_adj_node, t_graph);
    }
  }

  node.f = time + 1;
  node.color = black;
}