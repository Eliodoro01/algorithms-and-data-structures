hemiltonian_cycle(G){
    path = []

    if source in G.nodes{
        path.push(source)
        if recursive_hamiltonian_cycle(G, path, source){
            return true
        }
        path.pop()
    }
    return false
}

recursive_hamiltonian_cycle(G, path, source){

    if lenght(path) == lenght(G){
        source = path[0]
        if  source in current_node.adj{
            return true
        }
        return false
    }

    for adj_node in current_node.adj{
        if adj_node not in path{
            path.push(adj_node)
            if recursive_hamiltonian_cycle(G, path, adj_node){
                return true
            }
            path.pop()
        }
    }

    return false
}

