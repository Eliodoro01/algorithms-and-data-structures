KnapsackProblem(weights, values, maxCapacity)
    numItems = length(values)
    
    // Crea una tabella di dimensione [numItems+1][maxCapacity+1]
    // Ogni cella rappresenterà il valore massimo ottenibile con:
    // - i primi i oggetti (riga i)
    // - capacità dello zaino j (colonna j)
    Create table[numItems+1][maxCapacity+1]
    
    // Caso base: zaino vuoto o nessun oggetto disponibile
    for i = 0 to numItems
        table[i][0] = 0
    for c = 0 to maxCapacity
        table[0][c] = 0
        
    // Per ogni oggetto
    for item = 1 to numItems
        // Per ogni possibile capacità dello zaino
        for currentCapacity = 1 to maxCapacity
            
            // Se l'oggetto è troppo pesante, non possiamo includerlo
            if weights[item] > currentCapacity
                // Prendiamo il valore massimo senza considerare questo oggetto
                table[item][currentCapacity] = table[item-1][currentCapacity]
            
            // Altrimenti, prendiamo il massimo tra:
            else
                // 1. Non includere l'oggetto corrente
                valueWithout = table[item-1][currentCapacity]
                
                // 2. Includere l'oggetto corrente
                valueWith = values[item] + table[item-1][currentCapacity - weights[item]]
                
                // Salviamo il valore maggiore
                table[item][currentCapacity] = max(valueWithout, valueWith)
    
    // Il valore massimo si trova nell'ultima cella della tabella
    return table[numItems][maxCapacity]





Knapsack01(weights, values, maxCapacity){
    numItems = lenght(values)

    create table[numItems + 1][maxCapacity+1]

    for(i=0 to numItems){
        table[i][0] = 0
    }
    for(c=0 to maxCapacity){
        table[0][c] = 0
    }

    for(item = 1 to numItems){
        for(currentCapacity = 1 to maxCapacity){
            if(weights[item] > currentCapacity){
                table[item][currentCapacity] = table[item-1][currentCapacity]
            }
            else{
                valueWithout = table[item-1][currentCapacity]
                valueWith = values[item] + table[item-1][currentCapacity - weights[item]]
                table[item][currentCapacity] = max(valueWith, valueWithout)
            }
        }
    }

    return table[numItems][maxCapacity]
} 