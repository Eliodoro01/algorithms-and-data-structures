initialize_single_source(graph, source):
    for node in (graph.nodes - source):
        node.d = infinite
        node.predecessor = NIL

    source.d = 0
    source.predecessor = NIL

relax(node1, node2, weights):
    if node2.d > node1.d + weights(node1, node2):
        node2.d = node1.d + weights(node1, node2)
        node2.predecessor = NIL

dijkstra(graph, weights, source):
    initialize_single_source(graph, source)

    set = empty_set

    queue = graph.nodes   // min priority queue

    while !queue.is_empty():
        node = queue.extract_min()
        set.add(node)

        for adj_node in node.adj:
            relax(node, adj_node, weights)



initialize_single_source(G, source){

    for node in G.nodes - source{
        node.d = inf
        node.predecessor = null
    }

    source.d = 0
    source.predecessor = null

}

relax(node1, node2, weights){
    if node2.d > node1.d + weights(node1,node2){
        node2.d = node1.d + weughts(node1,node2)
        node2.predecessor = null
    }
}

dijkstra(G, weights, source){

    initialize_single_source(G, source)

    set = empty_set()

    q = new min_priority_queue()
    
    for node in G.nodes{
        q.enqueue(node)
    }

    while(!q.is_empty()){
        node = q.extract_min()

        set.add(node)

        for adj_node in node.adj{
            relax(node, adj_node, weights)
        } 
    }
}