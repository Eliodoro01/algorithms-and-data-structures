/**
 * visita DFS che tiene conto anche di cappi e cicli di un grafo
 */

cycles: int = 0
self_loops: int = 0

dfs(graph) {
  for (node in graph.nodes) {
    node.color = white;
    node.predecessor = null;
    node.d = 0;
  }

  for (node in graph.nodes) {
    if (node.color == white) {
      dfs_visit(node);
    }
  }
}

dfs_visit(node) {
  node.color = gray;
  node.d = time + 1;

  for (adj_node in node.adj) {
    if (adj_node == node) {
      // self loop
      self_loops++;
    } else if (adj_node.color == white) {
      adj_node.predecessor = node;

      dfs_visit(adj_node);
    } else if (adj_node.color == gray) {
      // cycle
      cycles++;
    }
  }

  node.color = black;
  node.f = time + 1;
}


self_loop : int = 0
cycles : int = 0

dfs(G){

  for(node in G.nodes){
    node.color = white
    node.predecessor = null
    node.d = 0
    node.f = 0
  }

  for(node in nodes){
    if(node.color == white){
      dfs_visit(node)
    }
  }
}


dfs_visit(node){

  node.color = gray
  node.d = time +1

  for(adj in node.adj){
    if(adj_node == node){
      self_loop++
    }
    else if(adj_node.color == white){
      adj_node.color = gray
      adj_node.predecessor = node

      dfs_visit(adj_node)
    }

    else if(adj_node.color == gray){
      cycles++
    }
  }
  node.color = black
  node.f = time + 1
}