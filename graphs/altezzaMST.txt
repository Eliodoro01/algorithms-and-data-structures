/**
 * Dato un grafo non orientato, pesato, con radice R. 
 * Calcolare l'altezza del MST radicato in R
 */

prim(graph, root, weights):
    for node in graph.nodes:
        node.predecessor = NIL
        node.key = inf
        node.visited = false

    root.key = 0
    root.predecessor = NIL

    queue = graph.nodes         // minimum priority queue

    while queue != ∅:
        node = queue.extract_min()
        node.visited = true

        for adj_node in node.adj:
            if not adj_node.visited and weights(node, adj_node) < adj_node.key:
                adj_node.predecessor = node
                adj_node.key = weights(node, adj_node)    // decrease key

compute_mst_height(root):
    if root == NIL:
        return 0
        
    max_height = 0
    
    for child in get_children(root):
        current_height = compute_mst_height(child)
        if current_height + 1 > max_height:
            max_height = current_height + 1
    
    return max_height

get_children(node):
    children = []
    for adj_node in node.adj:
        if adj_node.predecessor == node:
            children.append(adj_node)
    return children


//La funzione get_children trova tutti i figli di 
//un nodo nell'albero (nodi il cui predecessore è il nodo corrente)