DFS(G){

    for node in G.nodes{
        node.color = white
        node.predecessor = null
        node.d= 0
        node.f = 0
    }

    S = new stack()

    for node in G.nodes{
        if node.color == white{
            DFS_VISIT(node, S)
        }
    }
}

DFS_VISIT(node, S){

    time = time + 1
    node.color = gray
    node.d = time

    for adj_node in node.adj{
        if adj_node.color == white{
            adj_node.predecessor = node
            DFS_VISIT(adj_node,S)
        }
    }
    
    time = time + 1
    node.color = black
    node.f = time

    S.push(node)
}


TRANSPOSE_GRAPH(G){

    GT = new graph()

    for node in G.nodes{
        GT.nodes.insert(node)
    }

    for (node1, node2) in G.edges{
        GT.edges.insert((node1,node2))
    }

    return GT
}

create_t_graph(graph):                              // Function to create transposed graph
    t_graph = new graph();

    for node in graph.nodes:
        t_graph.nodes.insert(node);                   // Nodes copy into transposed graph

    for (node1, node2) in graph.edges:
        t_graph.edges.insert((node2, node1));   // Reverse edge

    return t_graph;