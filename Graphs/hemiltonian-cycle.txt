/**
 * Verifica la presenza di un ciclo Hamiltoniano in un grafo non orientato
 * Un ciclo Hamiltoniano Ã¨ un percorso che visita ogni vertice esattamente una volta
 * e ritorna al vertice di partenza.
 */


hamiltonian_cycle(graph):
    path = []  // Percorso corrente
    
    // Prova ogni nodo come punto di partenza
    for start_node in graph.nodes:
        path.push(start_node)
        if recursive_hamiltonian_cycle(graph, path, start_node):
            return true
        path.pop()  // Backtracking
    
    return false

recursive_hamiltonian_cycle(graph, path, current_node):
    // Condizione di terminazione: abbiamo tutti i nodi nel percorso
    if length(path) == length(graph.nodes):
        // Verifica se possiamo tornare al nodo iniziale
        first_node = path[0]
        if first_node in current_node.adjacent_nodes:
            return true  // Trovato ciclo Hamiltoniano
        return false
    
    // Esplora i nodi adiacenti non visitati
    for neighbor in current_node.adjacent_nodes:
        if neighbor not in path:
            path.push(neighbor)
            if recursive_hamiltonian_cycle(graph, path, neighbor):
                return true
            path.pop()  // Backtracking
    
    return false






hamiltonian_cycle(G){
    path = []

    for source_node in G.nodes{
        path.push(source_node)
        if recursive_hamiltonian_cycle(G, path, source_node){
            return true
        }
        path.pop()
    }

    return false
}


recursive_hamiltonian_cycle(G,path, current_node){
    if lenght(path) == lenght(G.nodes){
        first_node = path[0]

        if first_node in current_node.adj_nodes{
            return true
        }

        return false
    }

    for adj_node in current_node.adj_nodes{
        if adj_node not in path{
            path.push[adj_node]

            if recursive_hamiltonian_cycle(G, path, adj_node){
                return true
            }
            path.pop()
        }
    }

    return false

