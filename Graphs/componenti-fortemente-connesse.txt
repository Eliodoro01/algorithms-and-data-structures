global time = 0                                   // Variabile globale per il tempo

DFS(G):
    S = new stack()                               // Stack per salvare i nodi in ordine di fine visita

    for node in G.nodes:
        node.color = white                        // Inizializza tutti i nodi come non visitati
        node.predecessor = null                   // Nessun predecessore inizialmente
        node.d = 0                                // Tempo di scoperta inizializzato a 0
        node.f = 0                                // Tempo di fine inizializzato a 0

    for node in G.nodes:
        if node.color == white:
            DFS_VISIT_1(node, S)                  // DFS per riempire lo stack

    GT = CREATE_T_GRAPH(G)                        // Crea il grafo trasposto

    for node in GT.nodes:
        node.color = white                        // Reinizializza i nodi
        node.predecessor = null

    SCCs = new list()                             // Lista delle componenti fortemente connesse

    while !S.is_empty():
        node = S.pop()
        if node.color == white:
            currentSCC = new list()
            DFS_VISIT_2(node, currentSCC)         // DFS su grafo trasposto
            SCCs.add(currentSCC)

    return SCCs                                   // Restituisce la lista delle SCC


DFS_VISIT_1(node, S):
    global time
    time = time + 1
    node.d = time
    node.color = gray                             // Nodo in visita

    for adj_node in node.adj:
        if adj_node.color == white:
            adj_node.predecessor = node
            DFS_VISIT_1(adj_node, S)

    node.color = black                            // Nodo completamente esplorato
    time = time + 1
    node.f = time
    S.push(node)                                  // Inserisce il nodo nello stack


DFS_VISIT_2(node, currentSCC):
    global time
    time = time + 1
    node.d = time
    node.color = gray
    currentSCC.add(node)                          // Aggiunge il nodo alla SCC corrente

    for adj_node in node.adj:
        if adj_node.color == white:
            adj_node.predecessor = node
            DFS_VISIT_2(adj_node, currentSCC)

    node.color = black
    time = time + 1
    node.f = time


CREATE_T_GRAPH(G):
    GT = new graph()

    for node in G.nodes:
        GT.nodes.insert(node)                     // Copia i nodi

    for (u, v) in G.edges:
        GT.edges.insert((v, u))                   // Inverti la direzione degli archi

    return GT
