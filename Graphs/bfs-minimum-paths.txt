/**
 * Grafo BFS dove devi conteggiare il numero dei cammini minimi < K 
 */

get_minimum_paths(graph, source_node, K) {
  
  minimum_paths = 0; // Numero totale di cammini minimi con distanza < K

  // Inizializzazione dei nodi
  for (node in graph.nodes) {
    node.d = INF;
    node.color = WHITE;
    node.predecessor = NULL;
    node.count = 0; // Numero di cammini minimi verso questo nodo
  }

  source_node.color = GRAY;
  source_node.d = 0;
  source_node.count = 1; // Un solo modo per raggiungere il nodo sorgente
  source_node.predecessor = NULL;

  queue = new Queue();
  queue.enqueue(source_node);

  // BFS
  while (!queue.is_empty()) {
    node = queue.dequeue();

    for (adj_node in node.adj) {
      if (adj_node.color == WHITE) {
        adj_node.color = GRAY;
        adj_node.d = node.d + 1;
        adj_node.count = node.count; // eredita il numero di cammini minimi
        adj_node.predecessor = node;
        queue.enqueue(adj_node);
      }
      else if (adj_node.d == node.d + 1) {
        // Cammino alternativo minimo trovato
        adj_node.count += node.count;
      }
    }

    node.color = BLACK;
  }

  // Somma dei cammini minimi con distanza < K
  for (node in graph.nodes) {
    if (node != source_node && node.d < K) {
      minimum_paths += node.count;
    }
  }

  return minimum_paths;
}
